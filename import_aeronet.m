function aeronet = import_aeronet(filename, ftype)
% aeronet = import_aeronet(filename, ftype) 
% Import yearly aeronet data
%
% If no input is given, reads/saves all files in current directory
%
% filename (optional): read/save specified file only
% ftype (optional):
%       'AOD': aerosol optical depth data, + water and aengstrom exponents
%       'TOD': total optical depth data (includes AOD and trace gases) 
%       'SDA': spectral deconvolution algorithm retrievals (fine mode
%              AOD, coarse code AOD, fine mode fraction)
%
%@Kristof Bognar, functions auto-generated by MATLAB


% check for input
if nargin==0
    %% no input: get list of all files
    
    % make list of all files
    tmp = dir('*'); 
    f_list = {tmp.name}; % cell array of file names
    
    % remove .mat files from list
    ind=find_in_cell(f_list,'.mat');

    f_list([1,2,ind])=[]; % also removes first two entries, '.' and '..'
    
    %% read all files
    for i=1:length(f_list)
        
        disp(['Reading file ' f_list{i}]);
        
        % get file type
        if strfind(f_list{i},'.lev2')
            ftype='AOD';
        elseif strfind(f_list{i},'.tot_lev2')
            ftype='TOD';
        elseif strfind(f_list{i},'.ONEILL_lev2')
            ftype='SDA';
        else
            disp('*** Cannot read above file, unknown extension')
        end
        
        aeronet=import_file(f_list{i}, ftype);
        
    end
    
elseif nargin==1
    %% file specified, get extension

    if strfind(filename,'lev2')
        ftype='AOD';
    elseif strfind(filename,'tot_lev2')
        ftype='TOD';
    elseif strfind(filename,'ONEILL_lev2')
        ftype='SDA';
    else
        disp('File format not recognized, specify ''AOD'' or ''TOD''')
    end
    
    aeronet=import_file(filename, ftype);
    
else
    %% all input specified
    
    aeronet=import_file(filename, ftype);
    
end


end

function aeronet=import_file(filename, ftype)

    delimiter = ',';

    if strcmp(ftype,'AOD')

        startRow = 8;
        endRow = inf;

        %% Read columns of data as strings:
        % For more information, see the TEXTSCAN documentation.
        formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

        %% Open the text file.
        fileID = fopen(filename,'r');

        %% Read columns of data according to format string.
        % This call is based on the structure of the file used to generate this
        % code. If an error occurs for a different file, try regenerating the code
        % from the Import Tool.
        dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
        for block=2:length(startRow)
            frewind(fileID);
            dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
            for col=1:length(dataArray)
                dataArray{col} = [dataArray{col};dataArrayBlock{col}];
            end
        end

        %% Close the text file.
        fclose(fileID);

        %% Convert the contents of columns containing numeric strings to numbers.
        % Replace non-numeric strings with NaN.
        raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
        for col=1:length(dataArray)-1
            raw(1:length(dataArray{col}),col) = dataArray{col};
        end
        numericData = NaN(size(dataArray{1},1),size(dataArray,2));

        for col=[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,75,76,77,78,79,80,81,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113]
            % Converts strings in the input cell array to numbers. Replaced non-numeric
            % strings with NaN.
            rawData = dataArray{col};
            for row=1:size(rawData, 1);
                % Create a regular expression to detect and remove non-numeric prefixes and
                % suffixes.
                regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
                try
                    result = regexp(rawData{row}, regexstr, 'names');
                    numbers = result.numbers;

                    % Detected commas in non-thousand locations.
                    invalidThousandsSeparator = false;
                    if any(numbers==',');
                        thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                        if isempty(regexp(thousandsRegExp, ',', 'once'));
                            numbers = NaN;
                            invalidThousandsSeparator = true;
                        end
                    end
                    % Convert numeric strings to numbers.
                    if ~invalidThousandsSeparator;
                        numbers = textscan(strrep(numbers, ',', ''), '%f');
                        numericData(row, col) = numbers{1};
                        raw{row, col} = numbers{1};
                    end
                catch me
                end
            end
        end

        dateFormats = {'dd:MM:yyyy', 'HH:mm:ss', 'dd:MM:yyyy'};
        dateFormatIndex = 1;
        blankDates = cell(1,size(raw,2));
        anyBlankDates = false(size(raw,1),1);
        invalidDates = cell(1,size(raw,2));
        anyInvalidDates = false(size(raw,1),1);
        for col=[1,2,82]% Convert the contents of columns with dates to MATLAB datetimes using date format string.
            try
                dates{col} = datetime(dataArray{col}, 'Format', dateFormats{col==[1,2,82]}, 'InputFormat', dateFormats{col==[1,2,82]}); %#ok<SAGROW>
            catch
                try
                    % Handle dates surrounded by quotes
                    dataArray{col} = cellfun(@(x) x(2:end-1), dataArray{col}, 'UniformOutput', false);
                    dates{col} = datetime(dataArray{col}, 'Format', dateFormats{col==[1,2,82]}, 'InputFormat', dateFormats{col==[1,2,82]}); %%#ok<SAGROW>
                catch
                    dates{col} = repmat(datetime([NaN NaN NaN]), size(dataArray{col})); %#ok<SAGROW>
                end
            end

            dateFormatIndex = dateFormatIndex + 1;
            blankDates{col} = cellfun(@isempty, dataArray{col});
            anyBlankDates = blankDates{col} | anyBlankDates;
            invalidDates{col} = isnan(dates{col}.Hour) - blankDates{col};
            anyInvalidDates = invalidDates{col} | anyInvalidDates;
        end
        dates = dates(:,[1,2,82]);
        blankDates = blankDates(:,[1,2,82]);
        invalidDates = invalidDates(:,[1,2,82]);

        %% Split data into numeric and cell columns.
        rawNumericColumns = raw(:, [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,75,76,77,78,79,80,81,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113]);
        rawCellColumns = raw(:, 73);


        %% Replace non-numeric cells with NaN
        R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
        rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

        %% Create output variable
        aeronet = table;
        aeronet.Dateddmmyyyy = dates{:, 1};
        aeronet.Timehhmmss = dates{:, 2};
        aeronet.Day_of_Year = cell2mat(rawNumericColumns(:, 1));
        aeronet.Day_of_YearFraction = cell2mat(rawNumericColumns(:, 2));
        aeronet.AOD_1640nm = cell2mat(rawNumericColumns(:, 3));
        aeronet.AOD_1020nm = cell2mat(rawNumericColumns(:, 4));
        aeronet.AOD_870nm = cell2mat(rawNumericColumns(:, 5));
        aeronet.AOD_865nm = cell2mat(rawNumericColumns(:, 6));
        aeronet.AOD_779nm = cell2mat(rawNumericColumns(:, 7));
        aeronet.AOD_675nm = cell2mat(rawNumericColumns(:, 8));
        aeronet.AOD_667nm = cell2mat(rawNumericColumns(:, 9));
        aeronet.AOD_620nm = cell2mat(rawNumericColumns(:, 10));
        aeronet.AOD_560nm = cell2mat(rawNumericColumns(:, 11));
        aeronet.AOD_555nm = cell2mat(rawNumericColumns(:, 12));
        aeronet.AOD_551nm = cell2mat(rawNumericColumns(:, 13));
        aeronet.AOD_532nm = cell2mat(rawNumericColumns(:, 14));
        aeronet.AOD_531nm = cell2mat(rawNumericColumns(:, 15));
        aeronet.AOD_510nm = cell2mat(rawNumericColumns(:, 16));
        aeronet.AOD_500nm = cell2mat(rawNumericColumns(:, 17));
        aeronet.AOD_490nm = cell2mat(rawNumericColumns(:, 18));
        aeronet.AOD_443nm = cell2mat(rawNumericColumns(:, 19));
        aeronet.AOD_440nm = cell2mat(rawNumericColumns(:, 20));
        aeronet.AOD_412nm = cell2mat(rawNumericColumns(:, 21));
        aeronet.AOD_400nm = cell2mat(rawNumericColumns(:, 22));
        aeronet.AOD_380nm = cell2mat(rawNumericColumns(:, 23));
        aeronet.AOD_340nm = cell2mat(rawNumericColumns(:, 24));
        aeronet.Precipitable_Watercm = cell2mat(rawNumericColumns(:, 25));
        aeronet.AOD_681nm = cell2mat(rawNumericColumns(:, 26));
        aeronet.AOD_709nm = cell2mat(rawNumericColumns(:, 27));
        aeronet.AOD_Empty = cell2mat(rawNumericColumns(:, 28));
        aeronet.AOD_Empty1 = cell2mat(rawNumericColumns(:, 29));
        aeronet.AOD_Empty2 = cell2mat(rawNumericColumns(:, 30));
        aeronet.AOD_Empty3 = cell2mat(rawNumericColumns(:, 31));
        aeronet.AOD_Empty4 = cell2mat(rawNumericColumns(:, 32));
        aeronet.Triplet_Variability_1640 = cell2mat(rawNumericColumns(:, 33));
        aeronet.Triplet_Variability_1020 = cell2mat(rawNumericColumns(:, 34));
        aeronet.Triplet_Variability_870 = cell2mat(rawNumericColumns(:, 35));
        aeronet.Triplet_Variability_865 = cell2mat(rawNumericColumns(:, 36));
        aeronet.Triplet_Variability_779 = cell2mat(rawNumericColumns(:, 37));
        aeronet.Triplet_Variability_675 = cell2mat(rawNumericColumns(:, 38));
        aeronet.Triplet_Variability_667 = cell2mat(rawNumericColumns(:, 39));
        aeronet.Triplet_Variability_620 = cell2mat(rawNumericColumns(:, 40));
        aeronet.Triplet_Variability_560 = cell2mat(rawNumericColumns(:, 41));
        aeronet.Triplet_Variability_555 = cell2mat(rawNumericColumns(:, 42));
        aeronet.Triplet_Variability_551 = cell2mat(rawNumericColumns(:, 43));
        aeronet.Triplet_Variability_532 = cell2mat(rawNumericColumns(:, 44));
        aeronet.Triplet_Variability_531 = cell2mat(rawNumericColumns(:, 45));
        aeronet.Triplet_Variability_510 = cell2mat(rawNumericColumns(:, 46));
        aeronet.Triplet_Variability_500 = cell2mat(rawNumericColumns(:, 47));
        aeronet.Triplet_Variability_490 = cell2mat(rawNumericColumns(:, 48));
        aeronet.Triplet_Variability_443 = cell2mat(rawNumericColumns(:, 49));
        aeronet.Triplet_Variability_440 = cell2mat(rawNumericColumns(:, 50));
        aeronet.Triplet_Variability_412 = cell2mat(rawNumericColumns(:, 51));
        aeronet.Triplet_Variability_400 = cell2mat(rawNumericColumns(:, 52));
        aeronet.Triplet_Variability_380 = cell2mat(rawNumericColumns(:, 53));
        aeronet.Triplet_Variability_340 = cell2mat(rawNumericColumns(:, 54));
        aeronet.Triplet_Variability_Precipitable_Watercm = cell2mat(rawNumericColumns(:, 55));
        aeronet.Triplet_Variability_681 = cell2mat(rawNumericColumns(:, 56));
        aeronet.Triplet_Variability_709 = cell2mat(rawNumericColumns(:, 57));
        aeronet.Triplet_Variability_AOD_Empty = cell2mat(rawNumericColumns(:, 58));
        aeronet.Triplet_Variability_AOD_Empty1 = cell2mat(rawNumericColumns(:, 59));
        aeronet.Triplet_Variability_AOD_Empty2 = cell2mat(rawNumericColumns(:, 60));
        aeronet.Triplet_Variability_AOD_Empty3 = cell2mat(rawNumericColumns(:, 61));
        aeronet.Triplet_Variability_AOD_Empty4 = cell2mat(rawNumericColumns(:, 62));
        aeronet.Angstrom_Exponent = cell2mat(rawNumericColumns(:, 63));
        aeronet.Angstrom_Exponent1 = cell2mat(rawNumericColumns(:, 64));
        aeronet.Angstrom_Exponent2 = cell2mat(rawNumericColumns(:, 65));
        aeronet.Angstrom_Exponent3 = cell2mat(rawNumericColumns(:, 66));
        aeronet.Angstrom_Exponent4 = cell2mat(rawNumericColumns(:, 67));
        aeronet.Angstrom_ExponentPolar = cell2mat(rawNumericColumns(:, 68));
        aeronet.Data_Quality_Level = cell2mat(rawNumericColumns(:, 69));
        aeronet.AERONET_Instrument_Number = cell2mat(rawNumericColumns(:, 70));
        aeronet.AERONET_Site_Name = rawCellColumns(:, 1);
        aeronet.Site_LatitudeDegrees = cell2mat(rawNumericColumns(:, 71));
        aeronet.Site_LongitudeDegrees = cell2mat(rawNumericColumns(:, 72));
        aeronet.Site_Elevationm = cell2mat(rawNumericColumns(:, 73));
        aeronet.Solar_Zenith_AngleDegrees = cell2mat(rawNumericColumns(:, 74));
        aeronet.Optical_Air_Mass = cell2mat(rawNumericColumns(:, 75));
        aeronet.Sensor_TemperatureDegrees_C = cell2mat(rawNumericColumns(:, 76));
        aeronet.OzoneDobson = cell2mat(rawNumericColumns(:, 77));
        aeronet.NO2Dobson = cell2mat(rawNumericColumns(:, 78));
        aeronet.Last_Date_Processed = dates{:, 3};
        aeronet.Number_of_Wavelengths = cell2mat(rawNumericColumns(:, 79));
        aeronet.Exact_Wavelengths_of_AODum_1640nm = cell2mat(rawNumericColumns(:, 80));
        aeronet.Exact_Wavelengths_of_AODum_1020nm = cell2mat(rawNumericColumns(:, 81));
        aeronet.Exact_Wavelengths_of_AODum_870nm = cell2mat(rawNumericColumns(:, 82));
        aeronet.Exact_Wavelengths_of_AODum_865nm = cell2mat(rawNumericColumns(:, 83));
        aeronet.Exact_Wavelengths_of_AODum_779nm = cell2mat(rawNumericColumns(:, 84));
        aeronet.Exact_Wavelengths_of_AODum_675nm = cell2mat(rawNumericColumns(:, 85));
        aeronet.Exact_Wavelengths_of_AODum_667nm = cell2mat(rawNumericColumns(:, 86));
        aeronet.Exact_Wavelengths_of_AODum_620nm = cell2mat(rawNumericColumns(:, 87));
        aeronet.Exact_Wavelengths_of_AODum_560nm = cell2mat(rawNumericColumns(:, 88));
        aeronet.Exact_Wavelengths_of_AODum_555nm = cell2mat(rawNumericColumns(:, 89));
        aeronet.Exact_Wavelengths_of_AODum_551nm = cell2mat(rawNumericColumns(:, 90));
        aeronet.Exact_Wavelengths_of_AODum_532nm = cell2mat(rawNumericColumns(:, 91));
        aeronet.Exact_Wavelengths_of_AODum_531nm = cell2mat(rawNumericColumns(:, 92));
        aeronet.Exact_Wavelengths_of_AODum_510nm = cell2mat(rawNumericColumns(:, 93));
        aeronet.Exact_Wavelengths_of_AODum_500nm = cell2mat(rawNumericColumns(:, 94));
        aeronet.Exact_Wavelengths_of_AODum_490nm = cell2mat(rawNumericColumns(:, 95));
        aeronet.Exact_Wavelengths_of_AODum_443nm = cell2mat(rawNumericColumns(:, 96));
        aeronet.Exact_Wavelengths_of_AODum_440nm = cell2mat(rawNumericColumns(:, 97));
        aeronet.Exact_Wavelengths_of_AODum_412nm = cell2mat(rawNumericColumns(:, 98));
        aeronet.Exact_Wavelengths_of_AODum_400nm = cell2mat(rawNumericColumns(:, 99));
        aeronet.Exact_Wavelengths_of_AODum_380nm = cell2mat(rawNumericColumns(:, 100));
        aeronet.Exact_Wavelengths_of_AODum_340nm = cell2mat(rawNumericColumns(:, 101));
        aeronet.Exact_Wavelengths_of_PWum_935nm = cell2mat(rawNumericColumns(:, 102));
        aeronet.Exact_Wavelengths_of_AODum_681nm = cell2mat(rawNumericColumns(:, 103));
        aeronet.Exact_Wavelengths_of_AODum_709nm = cell2mat(rawNumericColumns(:, 104));
        aeronet.Exact_Wavelengths_of_AODum_Empty = cell2mat(rawNumericColumns(:, 105));
        aeronet.Exact_Wavelengths_of_AODum_Empty1 = cell2mat(rawNumericColumns(:, 106));
        aeronet.Exact_Wavelengths_of_AODum_Empty2 = cell2mat(rawNumericColumns(:, 107));
        aeronet.Exact_Wavelengths_of_AODum_Empty3 = cell2mat(rawNumericColumns(:, 108));
        aeronet.Exact_Wavelengths_of_AODum_Empty4 = cell2mat(rawNumericColumns(:, 109));

        % For code requiring serial dates (datenum) instead of datetime, uncomment
        % the following line(s) below to return the imported dates as datenum(s).

        % aeronet.Dateddmmyyyy=datenum(aeronet.Dateddmmyyyy);
        % aeronet.Timehhmmss=datenum(aeronet.Timehhmmss);
        % aeronet.Last_Date_Processed=datenum(aeronet.Last_Date_Processed);


    elseif strcmp(ftype,'TOD')

        startRow = 8;
        endRow = inf;

        %% Read columns of data as strings:
        % For more information, see the TEXTSCAN documentation.
        formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

        %% Open the text file.
        fileID = fopen(filename,'r');

        %% Read columns of data according to format string.
        % This call is based on the structure of the file used to generate this
        % code. If an error occurs for a different file, try regenerating the code
        % from the Import Tool.
        dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
        for block=2:length(startRow)
            frewind(fileID);
            dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
            for col=1:length(dataArray)
                dataArray{col} = [dataArray{col};dataArrayBlock{col}];
            end
        end

        %% Close the text file.
        fclose(fileID);

        %% Convert the contents of columns containing numeric strings to numbers.
        % Replace non-numeric strings with NaN.
        raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
        for col=1:length(dataArray)-1
            raw(1:length(dataArray{col}),col) = dataArray{col};
        end
        numericData = NaN(size(dataArray{1},1),size(dataArray,2));

        for col=[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,251,252,253,254,255,256,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288]
            % Converts strings in the input cell array to numbers. Replaced non-numeric
            % strings with NaN.
            rawData = dataArray{col};
            for row=1:size(rawData, 1);
                % Create a regular expression to detect and remove non-numeric prefixes and
                % suffixes.
                regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
                try
                    result = regexp(rawData{row}, regexstr, 'names');
                    numbers = result.numbers;

                    % Detected commas in non-thousand locations.
                    invalidThousandsSeparator = false;
                    if any(numbers==',');
                        thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                        if isempty(regexp(thousandsRegExp, ',', 'once'));
                            numbers = NaN;
                            invalidThousandsSeparator = true;
                        end
                    end
                    % Convert numeric strings to numbers.
                    if ~invalidThousandsSeparator;
                        numbers = textscan(strrep(numbers, ',', ''), '%f');
                        numericData(row, col) = numbers{1};
                        raw{row, col} = numbers{1};
                    end
                catch me
                end
            end
        end

        dateFormats = {'dd:MM:yyyy', 'HH:mm:ss', 'dd:MM:yyyy'};
        dateFormatIndex = 1;
        blankDates = cell(1,size(raw,2));
        anyBlankDates = false(size(raw,1),1);
        invalidDates = cell(1,size(raw,2));
        anyInvalidDates = false(size(raw,1),1);
        for col=[1,2,257]% Convert the contents of columns with dates to MATLAB datetimes using date format string.
            try
                dates{col} = datetime(dataArray{col}, 'Format', dateFormats{col==[1,2,257]}, 'InputFormat', dateFormats{col==[1,2,257]}); %#ok<SAGROW>
            catch
                try
                    % Handle dates surrounded by quotes
                    dataArray{col} = cellfun(@(x) x(2:end-1), dataArray{col}, 'UniformOutput', false);
                    dates{col} = datetime(dataArray{col}, 'Format', dateFormats{col==[1,2,257]}, 'InputFormat', dateFormats{col==[1,2,257]}); %%#ok<SAGROW>
                catch
                    dates{col} = repmat(datetime([NaN NaN NaN]), size(dataArray{col})); %#ok<SAGROW>
                end
            end

            dateFormatIndex = dateFormatIndex + 1;
            blankDates{col} = cellfun(@isempty, dataArray{col});
            anyBlankDates = blankDates{col} | anyBlankDates;
            invalidDates{col} = isnan(dates{col}.Hour) - blankDates{col};
            anyInvalidDates = invalidDates{col} | anyInvalidDates;
        end
        dates = dates(:,[1,2,257]);
        blankDates = blankDates(:,[1,2,257]);
        invalidDates = invalidDates(:,[1,2,257]);

        %% Split data into numeric and cell columns.
        rawNumericColumns = raw(:, [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,251,252,253,254,255,256,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288]);
        rawCellColumns = raw(:, 250);


        %% Replace non-numeric cells with NaN
        R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
        rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

        %% Create output variable
        aeronet = table;
        aeronet.Dateddmmyyyy = dates{:, 1};
        aeronet.Timehhmmss = dates{:, 2};
        aeronet.Day_of_Year = cell2mat(rawNumericColumns(:, 1));
        aeronet.Day_of_YearFraction = cell2mat(rawNumericColumns(:, 2));
        aeronet.AOD_1640nmTotal = cell2mat(rawNumericColumns(:, 3));
        aeronet.AOD_1640nmAOD = cell2mat(rawNumericColumns(:, 4));
        aeronet.AOD_1640nmRayleigh = cell2mat(rawNumericColumns(:, 5));
        aeronet.AOD_1640nmO3 = cell2mat(rawNumericColumns(:, 6));
        aeronet.AOD_1640nmNO2 = cell2mat(rawNumericColumns(:, 7));
        aeronet.AOD_1640nmCO2 = cell2mat(rawNumericColumns(:, 8));
        aeronet.AOD_1640nmCH4 = cell2mat(rawNumericColumns(:, 9));
        aeronet.AOD_1640nmWaterVapor = cell2mat(rawNumericColumns(:, 10));
        aeronet.AOD_1020nmTotal = cell2mat(rawNumericColumns(:, 11));
        aeronet.AOD_1020nmAOD = cell2mat(rawNumericColumns(:, 12));
        aeronet.AOD_1020nmRayleigh = cell2mat(rawNumericColumns(:, 13));
        aeronet.AOD_1020nmO3 = cell2mat(rawNumericColumns(:, 14));
        aeronet.AOD_1020nmNO2 = cell2mat(rawNumericColumns(:, 15));
        aeronet.AOD_1020nmCO2 = cell2mat(rawNumericColumns(:, 16));
        aeronet.AOD_1020nmCH4 = cell2mat(rawNumericColumns(:, 17));
        aeronet.AOD_1020nmWaterVapor = cell2mat(rawNumericColumns(:, 18));
        aeronet.AOD_870nmTotal = cell2mat(rawNumericColumns(:, 19));
        aeronet.AOD_870nmAOD = cell2mat(rawNumericColumns(:, 20));
        aeronet.AOD_870nmRayleigh = cell2mat(rawNumericColumns(:, 21));
        aeronet.AOD_870nmO3 = cell2mat(rawNumericColumns(:, 22));
        aeronet.AOD_870nmNO2 = cell2mat(rawNumericColumns(:, 23));
        aeronet.AOD_870nmCO2 = cell2mat(rawNumericColumns(:, 24));
        aeronet.AOD_870nmCH4 = cell2mat(rawNumericColumns(:, 25));
        aeronet.AOD_870nmWaterVapor = cell2mat(rawNumericColumns(:, 26));
        aeronet.AOD_865nmTotal = cell2mat(rawNumericColumns(:, 27));
        aeronet.AOD_865nmAOD = cell2mat(rawNumericColumns(:, 28));
        aeronet.AOD_865nmRayleigh = cell2mat(rawNumericColumns(:, 29));
        aeronet.AOD_865nmO3 = cell2mat(rawNumericColumns(:, 30));
        aeronet.AOD_865nmNO2 = cell2mat(rawNumericColumns(:, 31));
        aeronet.AOD_865nmCO2 = cell2mat(rawNumericColumns(:, 32));
        aeronet.AOD_865nmCH4 = cell2mat(rawNumericColumns(:, 33));
        aeronet.AOD_865nmWaterVapor = cell2mat(rawNumericColumns(:, 34));
        aeronet.AOD_779nmTotal = cell2mat(rawNumericColumns(:, 35));
        aeronet.AOD_779nmAOD = cell2mat(rawNumericColumns(:, 36));
        aeronet.AOD_779nmRayleigh = cell2mat(rawNumericColumns(:, 37));
        aeronet.AOD_779nmO3 = cell2mat(rawNumericColumns(:, 38));
        aeronet.AOD_779nmNO2 = cell2mat(rawNumericColumns(:, 39));
        aeronet.AOD_779nmCO2 = cell2mat(rawNumericColumns(:, 40));
        aeronet.AOD_779nmCH4 = cell2mat(rawNumericColumns(:, 41));
        aeronet.AOD_779nmWaterVapor = cell2mat(rawNumericColumns(:, 42));
        aeronet.AOD_675nmTotal = cell2mat(rawNumericColumns(:, 43));
        aeronet.AOD_675nmAOD = cell2mat(rawNumericColumns(:, 44));
        aeronet.AOD_675nmRayleigh = cell2mat(rawNumericColumns(:, 45));
        aeronet.AOD_675nmO3 = cell2mat(rawNumericColumns(:, 46));
        aeronet.AOD_675nmNO2 = cell2mat(rawNumericColumns(:, 47));
        aeronet.AOD_675nmCO2 = cell2mat(rawNumericColumns(:, 48));
        aeronet.AOD_675nmCH4 = cell2mat(rawNumericColumns(:, 49));
        aeronet.AOD_675nmWaterVapor = cell2mat(rawNumericColumns(:, 50));
        aeronet.AOD_667nmTotal = cell2mat(rawNumericColumns(:, 51));
        aeronet.AOD_667nmAOD = cell2mat(rawNumericColumns(:, 52));
        aeronet.AOD_667nmRayleigh = cell2mat(rawNumericColumns(:, 53));
        aeronet.AOD_667nmO3 = cell2mat(rawNumericColumns(:, 54));
        aeronet.AOD_667nmNO2 = cell2mat(rawNumericColumns(:, 55));
        aeronet.AOD_667nmCO2 = cell2mat(rawNumericColumns(:, 56));
        aeronet.AOD_667nmCH4 = cell2mat(rawNumericColumns(:, 57));
        aeronet.AOD_667nmWaterVapor = cell2mat(rawNumericColumns(:, 58));
        aeronet.AOD_620nmTotal = cell2mat(rawNumericColumns(:, 59));
        aeronet.AOD_620nmAOD = cell2mat(rawNumericColumns(:, 60));
        aeronet.AOD_620nmRayleigh = cell2mat(rawNumericColumns(:, 61));
        aeronet.AOD_620nmO3 = cell2mat(rawNumericColumns(:, 62));
        aeronet.AOD_620nmNO2 = cell2mat(rawNumericColumns(:, 63));
        aeronet.AOD_620nmCO2 = cell2mat(rawNumericColumns(:, 64));
        aeronet.AOD_620nmCH4 = cell2mat(rawNumericColumns(:, 65));
        aeronet.AOD_620nmWaterVapor = cell2mat(rawNumericColumns(:, 66));
        aeronet.AOD_560nmTotal = cell2mat(rawNumericColumns(:, 67));
        aeronet.AOD_560nmAOD = cell2mat(rawNumericColumns(:, 68));
        aeronet.AOD_560nmRayleigh = cell2mat(rawNumericColumns(:, 69));
        aeronet.AOD_560nmO3 = cell2mat(rawNumericColumns(:, 70));
        aeronet.AOD_560nmNO2 = cell2mat(rawNumericColumns(:, 71));
        aeronet.AOD_560nmCO2 = cell2mat(rawNumericColumns(:, 72));
        aeronet.AOD_560nmCH4 = cell2mat(rawNumericColumns(:, 73));
        aeronet.AOD_560nmWaterVapor = cell2mat(rawNumericColumns(:, 74));
        aeronet.AOD_555nmTotal = cell2mat(rawNumericColumns(:, 75));
        aeronet.AOD_555nmAOD = cell2mat(rawNumericColumns(:, 76));
        aeronet.AOD_555nmRayleigh = cell2mat(rawNumericColumns(:, 77));
        aeronet.AOD_555nmO3 = cell2mat(rawNumericColumns(:, 78));
        aeronet.AOD_555nmNO2 = cell2mat(rawNumericColumns(:, 79));
        aeronet.AOD_555nmCO2 = cell2mat(rawNumericColumns(:, 80));
        aeronet.AOD_555nmCH4 = cell2mat(rawNumericColumns(:, 81));
        aeronet.AOD_555nmWaterVapor = cell2mat(rawNumericColumns(:, 82));
        aeronet.AOD_551nmTotal = cell2mat(rawNumericColumns(:, 83));
        aeronet.AOD_551nmAOD = cell2mat(rawNumericColumns(:, 84));
        aeronet.AOD_551nmRayleigh = cell2mat(rawNumericColumns(:, 85));
        aeronet.AOD_551nmO3 = cell2mat(rawNumericColumns(:, 86));
        aeronet.AOD_551nmNO2 = cell2mat(rawNumericColumns(:, 87));
        aeronet.AOD_551nmCO2 = cell2mat(rawNumericColumns(:, 88));
        aeronet.AOD_551nmCH4 = cell2mat(rawNumericColumns(:, 89));
        aeronet.AOD_551nmWaterVapor = cell2mat(rawNumericColumns(:, 90));
        aeronet.AOD_532nmTotal = cell2mat(rawNumericColumns(:, 91));
        aeronet.AOD_532nmAOD = cell2mat(rawNumericColumns(:, 92));
        aeronet.AOD_532nmRayleigh = cell2mat(rawNumericColumns(:, 93));
        aeronet.AOD_532nmO3 = cell2mat(rawNumericColumns(:, 94));
        aeronet.AOD_532nmNO2 = cell2mat(rawNumericColumns(:, 95));
        aeronet.AOD_532nmCO2 = cell2mat(rawNumericColumns(:, 96));
        aeronet.AOD_532nmCH4 = cell2mat(rawNumericColumns(:, 97));
        aeronet.AOD_532nmWaterVapor = cell2mat(rawNumericColumns(:, 98));
        aeronet.AOD_531nmTotal = cell2mat(rawNumericColumns(:, 99));
        aeronet.AOD_531nmAOD = cell2mat(rawNumericColumns(:, 100));
        aeronet.AOD_531nmRayleigh = cell2mat(rawNumericColumns(:, 101));
        aeronet.AOD_531nmO3 = cell2mat(rawNumericColumns(:, 102));
        aeronet.AOD_531nmNO2 = cell2mat(rawNumericColumns(:, 103));
        aeronet.AOD_531nmCO2 = cell2mat(rawNumericColumns(:, 104));
        aeronet.AOD_531nmCH4 = cell2mat(rawNumericColumns(:, 105));
        aeronet.AOD_531nmWaterVapor = cell2mat(rawNumericColumns(:, 106));
        aeronet.AOD_510nmTotal = cell2mat(rawNumericColumns(:, 107));
        aeronet.AOD_510nmAOD = cell2mat(rawNumericColumns(:, 108));
        aeronet.AOD_510nmRayleigh = cell2mat(rawNumericColumns(:, 109));
        aeronet.AOD_510nmO3 = cell2mat(rawNumericColumns(:, 110));
        aeronet.AOD_510nmNO2 = cell2mat(rawNumericColumns(:, 111));
        aeronet.AOD_510nmCO2 = cell2mat(rawNumericColumns(:, 112));
        aeronet.AOD_510nmCH4 = cell2mat(rawNumericColumns(:, 113));
        aeronet.AOD_510nmWaterVapor = cell2mat(rawNumericColumns(:, 114));
        aeronet.AOD_500nmTotal = cell2mat(rawNumericColumns(:, 115));
        aeronet.AOD_500nmAOD = cell2mat(rawNumericColumns(:, 116));
        aeronet.AOD_500nmRayleigh = cell2mat(rawNumericColumns(:, 117));
        aeronet.AOD_500nmO3 = cell2mat(rawNumericColumns(:, 118));
        aeronet.AOD_500nmNO2 = cell2mat(rawNumericColumns(:, 119));
        aeronet.AOD_500nmCO2 = cell2mat(rawNumericColumns(:, 120));
        aeronet.AOD_500nmCH4 = cell2mat(rawNumericColumns(:, 121));
        aeronet.AOD_500nmWaterVapor = cell2mat(rawNumericColumns(:, 122));
        aeronet.AOD_490nmTotal = cell2mat(rawNumericColumns(:, 123));
        aeronet.AOD_490nmAOD = cell2mat(rawNumericColumns(:, 124));
        aeronet.AOD_490nmRayleigh = cell2mat(rawNumericColumns(:, 125));
        aeronet.AOD_490nmO3 = cell2mat(rawNumericColumns(:, 126));
        aeronet.AOD_490nmNO2 = cell2mat(rawNumericColumns(:, 127));
        aeronet.AOD_490nmCO2 = cell2mat(rawNumericColumns(:, 128));
        aeronet.AOD_490nmCH4 = cell2mat(rawNumericColumns(:, 129));
        aeronet.AOD_490nmWaterVapor = cell2mat(rawNumericColumns(:, 130));
        aeronet.AOD_443nmTotal = cell2mat(rawNumericColumns(:, 131));
        aeronet.AOD_443nmAOD = cell2mat(rawNumericColumns(:, 132));
        aeronet.AOD_443nmRayleigh = cell2mat(rawNumericColumns(:, 133));
        aeronet.AOD_443nmO3 = cell2mat(rawNumericColumns(:, 134));
        aeronet.AOD_443nmNO2 = cell2mat(rawNumericColumns(:, 135));
        aeronet.AOD_443nmCO2 = cell2mat(rawNumericColumns(:, 136));
        aeronet.AOD_443nmCH4 = cell2mat(rawNumericColumns(:, 137));
        aeronet.AOD_443nmWaterVapor = cell2mat(rawNumericColumns(:, 138));
        aeronet.AOD_440nmTotal = cell2mat(rawNumericColumns(:, 139));
        aeronet.AOD_440nmAOD = cell2mat(rawNumericColumns(:, 140));
        aeronet.AOD_440nmRayleigh = cell2mat(rawNumericColumns(:, 141));
        aeronet.AOD_440nmO3 = cell2mat(rawNumericColumns(:, 142));
        aeronet.AOD_440nmNO2 = cell2mat(rawNumericColumns(:, 143));
        aeronet.AOD_440nmCO2 = cell2mat(rawNumericColumns(:, 144));
        aeronet.AOD_440nmCH4 = cell2mat(rawNumericColumns(:, 145));
        aeronet.AOD_440nmWaterVapor = cell2mat(rawNumericColumns(:, 146));
        aeronet.AOD_412nmTotal = cell2mat(rawNumericColumns(:, 147));
        aeronet.AOD_412nmAOD = cell2mat(rawNumericColumns(:, 148));
        aeronet.AOD_412nmRayleigh = cell2mat(rawNumericColumns(:, 149));
        aeronet.AOD_412nmO3 = cell2mat(rawNumericColumns(:, 150));
        aeronet.AOD_412nmNO2 = cell2mat(rawNumericColumns(:, 151));
        aeronet.AOD_412nmCO2 = cell2mat(rawNumericColumns(:, 152));
        aeronet.AOD_412nmCH4 = cell2mat(rawNumericColumns(:, 153));
        aeronet.AOD_412nmWaterVapor = cell2mat(rawNumericColumns(:, 154));
        aeronet.AOD_400nmTotal = cell2mat(rawNumericColumns(:, 155));
        aeronet.AOD_400nmAOD = cell2mat(rawNumericColumns(:, 156));
        aeronet.AOD_400nmRayleigh = cell2mat(rawNumericColumns(:, 157));
        aeronet.AOD_400nmO3 = cell2mat(rawNumericColumns(:, 158));
        aeronet.AOD_400nmNO2 = cell2mat(rawNumericColumns(:, 159));
        aeronet.AOD_400nmCO2 = cell2mat(rawNumericColumns(:, 160));
        aeronet.AOD_400nmCH4 = cell2mat(rawNumericColumns(:, 161));
        aeronet.AOD_400nmWaterVapor = cell2mat(rawNumericColumns(:, 162));
        aeronet.AOD_380nmTotal = cell2mat(rawNumericColumns(:, 163));
        aeronet.AOD_380nmAOD = cell2mat(rawNumericColumns(:, 164));
        aeronet.AOD_380nmRayleigh = cell2mat(rawNumericColumns(:, 165));
        aeronet.AOD_380nmO3 = cell2mat(rawNumericColumns(:, 166));
        aeronet.AOD_380nmNO2 = cell2mat(rawNumericColumns(:, 167));
        aeronet.AOD_380nmCO2 = cell2mat(rawNumericColumns(:, 168));
        aeronet.AOD_380nmCH4 = cell2mat(rawNumericColumns(:, 169));
        aeronet.AOD_380nmWaterVapor = cell2mat(rawNumericColumns(:, 170));
        aeronet.AOD_340nmTotal = cell2mat(rawNumericColumns(:, 171));
        aeronet.AOD_340nmAOD = cell2mat(rawNumericColumns(:, 172));
        aeronet.AOD_340nmRayleigh = cell2mat(rawNumericColumns(:, 173));
        aeronet.AOD_340nmO3 = cell2mat(rawNumericColumns(:, 174));
        aeronet.AOD_340nmNO2 = cell2mat(rawNumericColumns(:, 175));
        aeronet.AOD_340nmCO2 = cell2mat(rawNumericColumns(:, 176));
        aeronet.AOD_340nmCH4 = cell2mat(rawNumericColumns(:, 177));
        aeronet.AOD_340nmWaterVapor = cell2mat(rawNumericColumns(:, 178));
        aeronet.WVcm_935nmTotal = cell2mat(rawNumericColumns(:, 179));
        aeronet.WVcm_935nmAOD = cell2mat(rawNumericColumns(:, 180));
        aeronet.WVcm_935nmRayleigh = cell2mat(rawNumericColumns(:, 181));
        aeronet.WVcm_935nmO3 = cell2mat(rawNumericColumns(:, 182));
        aeronet.WVcm_935nmNO2 = cell2mat(rawNumericColumns(:, 183));
        aeronet.WVcm_935nmCO2 = cell2mat(rawNumericColumns(:, 184));
        aeronet.WVcm_935nmCH4 = cell2mat(rawNumericColumns(:, 185));
        aeronet.WVcm_935nmWaterVapor = cell2mat(rawNumericColumns(:, 186));
        aeronet.AOD_681nmTotal = cell2mat(rawNumericColumns(:, 187));
        aeronet.AOD_681nmAOD = cell2mat(rawNumericColumns(:, 188));
        aeronet.AOD_681nmRayleigh = cell2mat(rawNumericColumns(:, 189));
        aeronet.AOD_681nmO3 = cell2mat(rawNumericColumns(:, 190));
        aeronet.AOD_681nmNO2 = cell2mat(rawNumericColumns(:, 191));
        aeronet.AOD_681nmCO2 = cell2mat(rawNumericColumns(:, 192));
        aeronet.AOD_681nmCH4 = cell2mat(rawNumericColumns(:, 193));
        aeronet.AOD_681nmWaterVapor = cell2mat(rawNumericColumns(:, 194));
        aeronet.AOD_709nmTotal = cell2mat(rawNumericColumns(:, 195));
        aeronet.AOD_709nmAOD = cell2mat(rawNumericColumns(:, 196));
        aeronet.AOD_709nmRayleigh = cell2mat(rawNumericColumns(:, 197));
        aeronet.AOD_709nmO3 = cell2mat(rawNumericColumns(:, 198));
        aeronet.AOD_709nmNO2 = cell2mat(rawNumericColumns(:, 199));
        aeronet.AOD_709nmCO2 = cell2mat(rawNumericColumns(:, 200));
        aeronet.AOD_709nmCH4 = cell2mat(rawNumericColumns(:, 201));
        aeronet.AOD_709nmWaterVapor = cell2mat(rawNumericColumns(:, 202));
        aeronet.AOD_EmptyTotal = cell2mat(rawNumericColumns(:, 203));
        aeronet.AOD_EmptyAOD = cell2mat(rawNumericColumns(:, 204));
        aeronet.AOD_EmptyRayleigh = cell2mat(rawNumericColumns(:, 205));
        aeronet.AOD_EmptyO3 = cell2mat(rawNumericColumns(:, 206));
        aeronet.AOD_EmptyNO2 = cell2mat(rawNumericColumns(:, 207));
        aeronet.AOD_EmptyCO2 = cell2mat(rawNumericColumns(:, 208));
        aeronet.AOD_EmptyCH4 = cell2mat(rawNumericColumns(:, 209));
        aeronet.AOD_EmptyWaterVapor = cell2mat(rawNumericColumns(:, 210));
        aeronet.AOD_EmptyTotal1 = cell2mat(rawNumericColumns(:, 211));
        aeronet.AOD_EmptyAOD1 = cell2mat(rawNumericColumns(:, 212));
        aeronet.AOD_EmptyRayleigh1 = cell2mat(rawNumericColumns(:, 213));
        aeronet.AOD_EmptyO1 = cell2mat(rawNumericColumns(:, 214));
        aeronet.AOD_EmptyNO1 = cell2mat(rawNumericColumns(:, 215));
        aeronet.AOD_EmptyCO1 = cell2mat(rawNumericColumns(:, 216));
        aeronet.AOD_EmptyCH1 = cell2mat(rawNumericColumns(:, 217));
        aeronet.AOD_EmptyWaterVapor1 = cell2mat(rawNumericColumns(:, 218));
        aeronet.AOD_EmptyTotal2 = cell2mat(rawNumericColumns(:, 219));
        aeronet.AOD_EmptyAOD2 = cell2mat(rawNumericColumns(:, 220));
        aeronet.AOD_EmptyRayleigh2 = cell2mat(rawNumericColumns(:, 221));
        aeronet.AOD_EmptyO2 = cell2mat(rawNumericColumns(:, 222));
        aeronet.AOD_EmptyNO3 = cell2mat(rawNumericColumns(:, 223));
        aeronet.AOD_EmptyCO3 = cell2mat(rawNumericColumns(:, 224));
        aeronet.AOD_EmptyCH2 = cell2mat(rawNumericColumns(:, 225));
        aeronet.AOD_EmptyWaterVapor2 = cell2mat(rawNumericColumns(:, 226));
        aeronet.AOD_EmptyTotal3 = cell2mat(rawNumericColumns(:, 227));
        aeronet.AOD_EmptyAOD3 = cell2mat(rawNumericColumns(:, 228));
        aeronet.AOD_EmptyRayleigh3 = cell2mat(rawNumericColumns(:, 229));
        aeronet.AOD_EmptyO4 = cell2mat(rawNumericColumns(:, 230));
        aeronet.AOD_EmptyNO4 = cell2mat(rawNumericColumns(:, 231));
        aeronet.AOD_EmptyCO4 = cell2mat(rawNumericColumns(:, 232));
        aeronet.AOD_EmptyCH3 = cell2mat(rawNumericColumns(:, 233));
        aeronet.AOD_EmptyWaterVapor3 = cell2mat(rawNumericColumns(:, 234));
        aeronet.AOD_EmptyTotal4 = cell2mat(rawNumericColumns(:, 235));
        aeronet.AOD_EmptyAOD4 = cell2mat(rawNumericColumns(:, 236));
        aeronet.AOD_EmptyRayleigh4 = cell2mat(rawNumericColumns(:, 237));
        aeronet.AOD_EmptyO5 = cell2mat(rawNumericColumns(:, 238));
        aeronet.AOD_EmptyNO5 = cell2mat(rawNumericColumns(:, 239));
        aeronet.AOD_EmptyCO5 = cell2mat(rawNumericColumns(:, 240));
        aeronet.AOD_EmptyCH5 = cell2mat(rawNumericColumns(:, 241));
        aeronet.AOD_EmptyWaterVapor4 = cell2mat(rawNumericColumns(:, 242));
        aeronet.PressurehPa = cell2mat(rawNumericColumns(:, 243));
        aeronet.OzoneDobson = cell2mat(rawNumericColumns(:, 244));
        aeronet.NO2Dobson = cell2mat(rawNumericColumns(:, 245));
        aeronet.Data_Quality_Level = cell2mat(rawNumericColumns(:, 246));
        aeronet.AERONET_Instrument_Number = cell2mat(rawNumericColumns(:, 247));
        aeronet.AERONET_Site_Name = rawCellColumns(:, 1);
        aeronet.Site_LatitudeDegrees = cell2mat(rawNumericColumns(:, 248));
        aeronet.Site_LongitudeDegrees = cell2mat(rawNumericColumns(:, 249));
        aeronet.Site_Elevationm = cell2mat(rawNumericColumns(:, 250));
        aeronet.Solar_Zenith_AngleDegrees = cell2mat(rawNumericColumns(:, 251));
        aeronet.Optical_Air_Mass = cell2mat(rawNumericColumns(:, 252));
        aeronet.Sensor_TemperatureDegrees_C = cell2mat(rawNumericColumns(:, 253));
        aeronet.Last_Date_Processed = dates{:, 3};
        aeronet.Number_of_Wavelengths = cell2mat(rawNumericColumns(:, 254));
        aeronet.Exact_Wavelengths_of_AODum_1640nm = cell2mat(rawNumericColumns(:, 255));
        aeronet.Exact_Wavelengths_of_AODum_1020nm = cell2mat(rawNumericColumns(:, 256));
        aeronet.Exact_Wavelengths_of_AODum_870nm = cell2mat(rawNumericColumns(:, 257));
        aeronet.Exact_Wavelengths_of_AODum_865nm = cell2mat(rawNumericColumns(:, 258));
        aeronet.Exact_Wavelengths_of_AODum_779nm = cell2mat(rawNumericColumns(:, 259));
        aeronet.Exact_Wavelengths_of_AODum_675nm = cell2mat(rawNumericColumns(:, 260));
        aeronet.Exact_Wavelengths_of_AODum_667nm = cell2mat(rawNumericColumns(:, 261));
        aeronet.Exact_Wavelengths_of_AODum_620nm = cell2mat(rawNumericColumns(:, 262));
        aeronet.Exact_Wavelengths_of_AODum_560nm = cell2mat(rawNumericColumns(:, 263));
        aeronet.Exact_Wavelengths_of_AODum_555nm = cell2mat(rawNumericColumns(:, 264));
        aeronet.Exact_Wavelengths_of_AODum_551nm = cell2mat(rawNumericColumns(:, 265));
        aeronet.Exact_Wavelengths_of_AODum_532nm = cell2mat(rawNumericColumns(:, 266));
        aeronet.Exact_Wavelengths_of_AODum_531nm = cell2mat(rawNumericColumns(:, 267));
        aeronet.Exact_Wavelengths_of_AODum_510nm = cell2mat(rawNumericColumns(:, 268));
        aeronet.Exact_Wavelengths_of_AODum_500nm = cell2mat(rawNumericColumns(:, 269));
        aeronet.Exact_Wavelengths_of_AODum_490nm = cell2mat(rawNumericColumns(:, 270));
        aeronet.Exact_Wavelengths_of_AODum_443nm = cell2mat(rawNumericColumns(:, 271));
        aeronet.Exact_Wavelengths_of_AODum_440nm = cell2mat(rawNumericColumns(:, 272));
        aeronet.Exact_Wavelengths_of_AODum_412nm = cell2mat(rawNumericColumns(:, 273));
        aeronet.Exact_Wavelengths_of_AODum_400nm = cell2mat(rawNumericColumns(:, 274));
        aeronet.Exact_Wavelengths_of_AODum_380nm = cell2mat(rawNumericColumns(:, 275));
        aeronet.Exact_Wavelengths_of_AODum_340nm = cell2mat(rawNumericColumns(:, 276));
        aeronet.Exact_Wavelengths_of_PWum_935nm = cell2mat(rawNumericColumns(:, 277));
        aeronet.Exact_Wavelengths_of_AODum_681nm = cell2mat(rawNumericColumns(:, 278));
        aeronet.Exact_Wavelengths_of_AODum_709nm = cell2mat(rawNumericColumns(:, 279));
        aeronet.Exact_Wavelengths_of_AODum_Empty = cell2mat(rawNumericColumns(:, 280));
        aeronet.Exact_Wavelengths_of_AODum_Empty1 = cell2mat(rawNumericColumns(:, 281));
        aeronet.Exact_Wavelengths_of_AODum_Empty2 = cell2mat(rawNumericColumns(:, 282));
        aeronet.Exact_Wavelengths_of_AODum_Empty3 = cell2mat(rawNumericColumns(:, 283));
        aeronet.Exact_Wavelengths_of_AODum_Empty4 = cell2mat(rawNumericColumns(:, 284));

        % For code requiring serial dates (datenum) instead of datetime, uncomment
        % the following line(s) below to return the imported dates as datenum(s).

        % aeronet.Dateddmmyyyy=datenum(PEARL.Dateddmmyyyy);
        % aeronet.Timehhmmss=datenum(PEARL.Timehhmmss);
        % aeronet.Last_Date_Processed=datenum(PEARL.Last_Date_Processed);


    elseif strcmp(ftype,'SDA')

        startRow = 8;
        endRow = inf;

        formatSpec = '%{dd:MM:yyyy}D%{HH:mm:ss}D%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%{dd:MM:yyyy}D%s%f%s%f%f%f%s%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';

        %% Open the text file.
        fileID = fopen(filename,'r');

        %% Read columns of data according to format string.
        % This call is based on the structure of the file used to generate this
        % code. If an error occurs for a different file, try regenerating the code
        % from the Import Tool.
        dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
        for block=2:length(startRow)
            frewind(fileID);
            dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
            for col=1:length(dataArray)
                dataArray{col} = [dataArray{col};dataArrayBlock{col}];
            end
        end

        %% Close the text file.
        fclose(fileID);

        %% Post processing for unimportable data.
        % No unimportable data rules were applied during the import, so no post
        % processing code is included. To generate code which works for
        % unimportable data, select unimportable cells in a file and regenerate the
        % script.

        %% Create output variable
        aeronet = table(dataArray{1:end-1}, 'VariableNames', {...
                  'Dateddmmyyyy','Timehhmmss','Day_of_Year','Day_of_Yearfraction',...
                  'Total_AOD_500nmtau_a','Fine_Mode_AOD_500nmtau_f',...
                  'Coarse_Mode_AOD_500nmtau_c','FineModeFraction_500nmeta',...
                  'nd_Order_Reg_Fit_ErrorTotal_AOD_500nmregression_dtau_a',...
                  'RMSE_Fine_Mode_AOD_500nmDtau_f','RMSE_Coarse_Mode_AOD_500nmDtau_c',...
                  'RMSE_FineModeFraction_500nmDeta',...
                  'Angstrom_ExponentAETotal_500nmalpha',...
                  'dAEdlnwavelengthTotal_500nmalphap','AEFine_Mode_500nmalpha_f',...
                  'dAEdlnwavelengthFine_Mode_500nmalphap_f','Solar_Zenith_AngleDegrees',...
                  'Air_Mass','nm_Input_AOD','nm_Input_AOD1',...
                  'nm_Input_AOD2','nm_Input_AOD3','nm_Input_AOD4','nm_Input_AOD5',...
                  'nm_Input_AOD6','nm_Input_AOD7','nm_Input_AOD8','nm_Input_AOD9',...
                  'nm_Input_AOD10','nm_Input_AOD11','nm_Input_AOD12',...
                  'nm_Input_AOD13','nm_Input_AOD14','nm_Input_AOD15','nm_Input_AOD16',...
                  'nm_Input_AOD17','nm_Input_AOD18','nm_Input_AOD19','nm_Input_AOD20',...
                  'AOD_Empty','AOD_Empty1','AOD_Empty2','AOD_Empty3','AOD_Empty4',...
                  'Last_Processing_Date','Data_Quality_Level','AERONET_Instrument_Number',...
                  'AERONET_Site_Name','Site_LatitudeDegrees','Site_LongitudeDegrees',...
                  'Site_Elevationm','Measurement_Typesolarorlunar','Number_of_Wavelengths',...
                  'Exact_Wavelengths_of_AODum_870nm','Exact_Wavelengths_of_AODum_865nm',...
                  'Exact_Wavelengths_of_AODum_779nm','Exact_Wavelengths_of_AODum_675nm',...
                  'Exact_Wavelengths_of_AODum_667nm','Exact_Wavelengths_of_AODum_620nm',...
                  'Exact_Wavelengths_of_AODum_560nm','Exact_Wavelengths_of_AODum_555nm',...
                  'Exact_Wavelengths_of_AODum_551nm','Exact_Wavelengths_of_AODum_532nm',...
                  'Exact_Wavelengths_of_AODum_531nm','Exact_Wavelengths_of_AODum_510nm',...
                  'Exact_Wavelengths_of_AODum_500nm','Exact_Wavelengths_of_AODum_490nm',...
                  'Exact_Wavelengths_of_AODum_443nm','Exact_Wavelengths_of_AODum_440nm',...
                  'Exact_Wavelengths_of_AODum_412nm','Exact_Wavelengths_of_AODum_400nm',...
                  'Exact_Wavelengths_of_AODum_380nm','Exact_Wavelengths_of_AODum_681nm',...
                  'Exact_Wavelengths_of_AODum_709nm','Exact_Wavelengths_of_AODum_Empty',...
                  'Exact_Wavelengths_of_AODum_Empty1','Exact_Wavelengths_of_AODum_Empty2',...
                  'Exact_Wavelengths_of_AODum_Empty3',...
                  'Exact_Wavelengths_of_AODum_Empty4'});

        % For code requiring serial dates (datenum) instead of datetime, uncomment
        % the following line(s) below to return the imported dates as datenum(s).

        % aeronet.Date_ddmmyyyy=datenum(aeronet.Date_ddmmyyyy);
        % aeronet.Time_hhmmss=datenum(aeronet.Time_hhmmss);
        % aeronet.Last_Processing_Date=datenum(aeronet.Last_Processing_Date);



    end

    %% format datetime fields
    aeronet.Dateddmmyyyy.Format='dd/MM/uuuu';
    aeronet.Timehhmmss.Format='HH:mm:ss';

    aeronet.DateTime=aeronet.Dateddmmyyyy+timeofday(aeronet.Timehhmmss);
    aeronet.DateTime.Format='dd/MM/uuuu HH:mm:ss';


    %% write data
    
    % year range in data
    styr=year(aeronet.Dateddmmyyyy(1));
    endyr=year(aeronet.Dateddmmyyyy(end));

    % month range in data
    stmo=month(aeronet.Dateddmmyyyy(1));
    endmo=month(aeronet.Dateddmmyyyy(end));
    % last UTC day of the month slips to nex month, ignore that
    if day(aeronet.Dateddmmyyyy(end))==1, endmo=endmo-1; end
    
    
    save([ 'PEARL_' ftype '_' num2str(styr) '_' num2str(stmo)...
          '_' num2str(endyr) '_' num2str(endmo) '.mat'],'aeronet');

end

